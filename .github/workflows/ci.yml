name: CI/CD Pipeline

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: hello-cicd
  REGISTRY: docker.io
  PYTHON_VERSION: '3.11'

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r demo_cicd/requirements.txt
          pip install pytest
      - name: Run unit tests
        run: pytest demo_cicd/test
      - name: Build Docker image
        run: |
          cd demo_cicd
          # Build with default version and environment variables for testing
          docker build \
            --build-arg APP_VERSION=${{ github.run_number }} \
            --build-arg ENVIRONMENT=ci \
            -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
    # Upload image as artifact for the next job (optional)
    
    # - name: Upload image
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: docker-image
    #     path: /home/runner/work/_temp/_github_home/${{ env.IMAGE_NAME }}_${{ github.sha }}.tar

  scan-push-deploy:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        run: |
          cd demo_cicd
          docker build \
            --build-arg APP_VERSION=${{ github.run_number }} \
            --build-arg ENVIRONMENT=production \
            -t ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@v0.17.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          severity: 'CRITICAL,HIGH'
      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      - name: Deploy to Kubernetes (example)
        if: ${{ secrets.KUBE_CONFIG_DATA != '' }}
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 -d > $HOME/.kube/config
          kubectl config use-context your-context
          # Alkalmazás frissítése a clusterben
          kubectl set image deployment/hello-cicd hello-cicd=$REGISTRY/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          kubectl rollout status deployment/hello-cicd